/* tslint:disable */
/* eslint-disable */
/**
 * Portfolio Management API
 * A comprehensive API for managing investment portfolios, tracking assets, and analyzing portfolio performance. Supports multiple asset types including cash, stocks, bonds, cryptocurrencies, foreign currencies, and futures.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@portfoliomanagement.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiAssetTypesIdDelete200Response } from '../models';
// @ts-ignore
import type { ApiAssetsGet200Response } from '../models';
// @ts-ignore
import type { ApiAssetsIdPutRequest } from '../models';
// @ts-ignore
import type { ApiAssetsPost201Response } from '../models';
// @ts-ignore
import type { ApiAssetsPostRequest } from '../models';
/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取所有资产
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页条目数
         * @param {number} [assetTypeId] 筛选特定类型的资产
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsGet: async (page?: number, pageSize?: number, assetTypeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (assetTypeId !== undefined) {
                localVarQueryParameter['asset_type_id'] = assetTypeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除资产
         * @param {number} id 资产ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAssetsIdDelete', 'id', id)
            const localVarPath = `/api/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取单个资产详情
         * @param {number} id 资产ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAssetsIdGet', 'id', id)
            const localVarPath = `/api/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新资产信息
         * @param {number} id 资产ID
         * @param {ApiAssetsIdPutRequest} apiAssetsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdPut: async (id: number, apiAssetsIdPutRequest: ApiAssetsIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAssetsIdPut', 'id', id)
            // verify required parameter 'apiAssetsIdPutRequest' is not null or undefined
            assertParamExists('apiAssetsIdPut', 'apiAssetsIdPutRequest', apiAssetsIdPutRequest)
            const localVarPath = `/api/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAssetsIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建资产
         * @param {ApiAssetsPostRequest} apiAssetsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsPost: async (apiAssetsPostRequest: ApiAssetsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiAssetsPostRequest' is not null or undefined
            assertParamExists('apiAssetsPost', 'apiAssetsPostRequest', apiAssetsPostRequest)
            const localVarPath = `/api/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAssetsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取所有资产
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页条目数
         * @param {number} [assetTypeId] 筛选特定类型的资产
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsGet(page?: number, pageSize?: number, assetTypeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAssetsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsGet(page, pageSize, assetTypeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 删除资产
         * @param {number} id 资产ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAssetTypesIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取单个资产详情
         * @param {number} id 资产ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAssetsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新资产信息
         * @param {number} id 资产ID
         * @param {ApiAssetsIdPutRequest} apiAssetsIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsIdPut(id: number, apiAssetsIdPutRequest: ApiAssetsIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAssetsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsIdPut(id, apiAssetsIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 创建资产
         * @param {ApiAssetsPostRequest} apiAssetsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAssetsPost(apiAssetsPostRequest: ApiAssetsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAssetsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAssetsPost(apiAssetsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AssetsApi.apiAssetsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetsApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取所有资产
         * @param {AssetsApiApiAssetsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsGet(requestParameters: AssetsApiApiAssetsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetsGet200Response> {
            return localVarFp.apiAssetsGet(requestParameters.page, requestParameters.pageSize, requestParameters.assetTypeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除资产
         * @param {AssetsApiApiAssetsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdDelete(requestParameters: AssetsApiApiAssetsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetTypesIdDelete200Response> {
            return localVarFp.apiAssetsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取单个资产详情
         * @param {AssetsApiApiAssetsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdGet(requestParameters: AssetsApiApiAssetsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetsPost201Response> {
            return localVarFp.apiAssetsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新资产信息
         * @param {AssetsApiApiAssetsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsIdPut(requestParameters: AssetsApiApiAssetsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetsPost201Response> {
            return localVarFp.apiAssetsIdPut(requestParameters.id, requestParameters.apiAssetsIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建资产
         * @param {AssetsApiApiAssetsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAssetsPost(requestParameters: AssetsApiApiAssetsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetsPost201Response> {
            return localVarFp.apiAssetsPost(requestParameters.apiAssetsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssetsApi - interface
 * @export
 * @interface AssetsApi
 */
export interface AssetsApiInterface {
    /**
     * 
     * @summary 获取所有资产
     * @param {AssetsApiApiAssetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    apiAssetsGet(requestParameters?: AssetsApiApiAssetsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetsGet200Response>;

    /**
     * 
     * @summary 删除资产
     * @param {AssetsApiApiAssetsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    apiAssetsIdDelete(requestParameters: AssetsApiApiAssetsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetTypesIdDelete200Response>;

    /**
     * 
     * @summary 获取单个资产详情
     * @param {AssetsApiApiAssetsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    apiAssetsIdGet(requestParameters: AssetsApiApiAssetsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetsPost201Response>;

    /**
     * 
     * @summary 更新资产信息
     * @param {AssetsApiApiAssetsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    apiAssetsIdPut(requestParameters: AssetsApiApiAssetsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetsPost201Response>;

    /**
     * 
     * @summary 创建资产
     * @param {AssetsApiApiAssetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApiInterface
     */
    apiAssetsPost(requestParameters: AssetsApiApiAssetsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiAssetsPost201Response>;

}

/**
 * Request parameters for apiAssetsGet operation in AssetsApi.
 * @export
 * @interface AssetsApiApiAssetsGetRequest
 */
export interface AssetsApiApiAssetsGetRequest {
    /**
     * 页码
     * @type {number}
     * @memberof AssetsApiApiAssetsGet
     */
    readonly page?: number

    /**
     * 每页条目数
     * @type {number}
     * @memberof AssetsApiApiAssetsGet
     */
    readonly pageSize?: number

    /**
     * 筛选特定类型的资产
     * @type {number}
     * @memberof AssetsApiApiAssetsGet
     */
    readonly assetTypeId?: number
}

/**
 * Request parameters for apiAssetsIdDelete operation in AssetsApi.
 * @export
 * @interface AssetsApiApiAssetsIdDeleteRequest
 */
export interface AssetsApiApiAssetsIdDeleteRequest {
    /**
     * 资产ID
     * @type {number}
     * @memberof AssetsApiApiAssetsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiAssetsIdGet operation in AssetsApi.
 * @export
 * @interface AssetsApiApiAssetsIdGetRequest
 */
export interface AssetsApiApiAssetsIdGetRequest {
    /**
     * 资产ID
     * @type {number}
     * @memberof AssetsApiApiAssetsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiAssetsIdPut operation in AssetsApi.
 * @export
 * @interface AssetsApiApiAssetsIdPutRequest
 */
export interface AssetsApiApiAssetsIdPutRequest {
    /**
     * 资产ID
     * @type {number}
     * @memberof AssetsApiApiAssetsIdPut
     */
    readonly id: number

    /**
     * 
     * @type {ApiAssetsIdPutRequest}
     * @memberof AssetsApiApiAssetsIdPut
     */
    readonly apiAssetsIdPutRequest: ApiAssetsIdPutRequest
}

/**
 * Request parameters for apiAssetsPost operation in AssetsApi.
 * @export
 * @interface AssetsApiApiAssetsPostRequest
 */
export interface AssetsApiApiAssetsPostRequest {
    /**
     * 
     * @type {ApiAssetsPostRequest}
     * @memberof AssetsApiApiAssetsPost
     */
    readonly apiAssetsPostRequest: ApiAssetsPostRequest
}

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI implements AssetsApiInterface {
    /**
     * 
     * @summary 获取所有资产
     * @param {AssetsApiApiAssetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsGet(requestParameters: AssetsApiApiAssetsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsGet(requestParameters.page, requestParameters.pageSize, requestParameters.assetTypeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除资产
     * @param {AssetsApiApiAssetsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsIdDelete(requestParameters: AssetsApiApiAssetsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取单个资产详情
     * @param {AssetsApiApiAssetsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsIdGet(requestParameters: AssetsApiApiAssetsIdGetRequest, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新资产信息
     * @param {AssetsApiApiAssetsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsIdPut(requestParameters: AssetsApiApiAssetsIdPutRequest, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsIdPut(requestParameters.id, requestParameters.apiAssetsIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建资产
     * @param {AssetsApiApiAssetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public apiAssetsPost(requestParameters: AssetsApiApiAssetsPostRequest, options?: RawAxiosRequestConfig) {
        return AssetsApiFp(this.configuration).apiAssetsPost(requestParameters.apiAssetsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

