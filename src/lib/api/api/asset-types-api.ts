/* tslint:disable */
/* eslint-disable */
/**
 * Portfolio Management API
 * A comprehensive API for managing investment portfolios, tracking assets, and analyzing portfolio performance. Supports multiple asset types including cash, stocks, bonds, cryptocurrencies, foreign currencies, and futures.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@portfoliomanagement.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { ApiAssetTypesGet200Response } from '../models'
// @ts-ignore
import type { ApiAssetTypesIdDelete200Response } from '../models'
// @ts-ignore
import type { ApiAssetTypesIdPutRequest } from '../models'
// @ts-ignore
import type { ApiAssetTypesPost201Response } from '../models'
// @ts-ignore
import type { ApiAssetTypesPostRequest } from '../models'
/**
 * AssetTypesApi - axios parameter creator
 * @export
 */
export const AssetTypesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 获取所有资产类型
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页条目数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesGet: async (
      page?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/asset_types`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['page_size'] = pageSize
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除资产类型
     * @param {number} id 资产类型ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiAssetTypesIdDelete', 'id', id)
      const localVarPath = `/api/asset_types/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取单个资产类型
     * @param {number} id 资产类型ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiAssetTypesIdGet', 'id', id)
      const localVarPath = `/api/asset_types/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 更新资产类型
     * @param {number} id 资产类型ID
     * @param {ApiAssetTypesIdPutRequest} apiAssetTypesIdPutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesIdPut: async (
      id: number,
      apiAssetTypesIdPutRequest: ApiAssetTypesIdPutRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiAssetTypesIdPut', 'id', id)
      // verify required parameter 'apiAssetTypesIdPutRequest' is not null or undefined
      assertParamExists(
        'apiAssetTypesIdPut',
        'apiAssetTypesIdPutRequest',
        apiAssetTypesIdPutRequest
      )
      const localVarPath = `/api/asset_types/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        apiAssetTypesIdPutRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建资产类型
     * @param {ApiAssetTypesPostRequest} apiAssetTypesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesPost: async (
      apiAssetTypesPostRequest: ApiAssetTypesPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiAssetTypesPostRequest' is not null or undefined
      assertParamExists(
        'apiAssetTypesPost',
        'apiAssetTypesPostRequest',
        apiAssetTypesPostRequest
      )
      const localVarPath = `/api/asset_types`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        apiAssetTypesPostRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AssetTypesApi - functional programming interface
 * @export
 */
export const AssetTypesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AssetTypesApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 获取所有资产类型
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页条目数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAssetTypesGet(
      page?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiAssetTypesGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAssetTypesGet(
          page,
          pageSize,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AssetTypesApi.apiAssetTypesGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 删除资产类型
     * @param {number} id 资产类型ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAssetTypesIdDelete(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiAssetTypesIdDelete200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAssetTypesIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AssetTypesApi.apiAssetTypesIdDelete']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 获取单个资产类型
     * @param {number} id 资产类型ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAssetTypesIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiAssetTypesPost201Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAssetTypesIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AssetTypesApi.apiAssetTypesIdGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 更新资产类型
     * @param {number} id 资产类型ID
     * @param {ApiAssetTypesIdPutRequest} apiAssetTypesIdPutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAssetTypesIdPut(
      id: number,
      apiAssetTypesIdPutRequest: ApiAssetTypesIdPutRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiAssetTypesPost201Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAssetTypesIdPut(
          id,
          apiAssetTypesIdPutRequest,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AssetTypesApi.apiAssetTypesIdPut']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 创建资产类型
     * @param {ApiAssetTypesPostRequest} apiAssetTypesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAssetTypesPost(
      apiAssetTypesPostRequest: ApiAssetTypesPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiAssetTypesPost201Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAssetTypesPost(
          apiAssetTypesPostRequest,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AssetTypesApi.apiAssetTypesPost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AssetTypesApi - factory interface
 * @export
 */
export const AssetTypesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AssetTypesApiFp(configuration)
  return {
    /**
     *
     * @summary 获取所有资产类型
     * @param {AssetTypesApiApiAssetTypesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesGet(
      requestParameters: AssetTypesApiApiAssetTypesGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiAssetTypesGet200Response> {
      return localVarFp
        .apiAssetTypesGet(
          requestParameters.page,
          requestParameters.pageSize,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 删除资产类型
     * @param {AssetTypesApiApiAssetTypesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesIdDelete(
      requestParameters: AssetTypesApiApiAssetTypesIdDeleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiAssetTypesIdDelete200Response> {
      return localVarFp
        .apiAssetTypesIdDelete(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 获取单个资产类型
     * @param {AssetTypesApiApiAssetTypesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesIdGet(
      requestParameters: AssetTypesApiApiAssetTypesIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiAssetTypesPost201Response> {
      return localVarFp
        .apiAssetTypesIdGet(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 更新资产类型
     * @param {AssetTypesApiApiAssetTypesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesIdPut(
      requestParameters: AssetTypesApiApiAssetTypesIdPutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiAssetTypesPost201Response> {
      return localVarFp
        .apiAssetTypesIdPut(
          requestParameters.id,
          requestParameters.apiAssetTypesIdPutRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 创建资产类型
     * @param {AssetTypesApiApiAssetTypesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAssetTypesPost(
      requestParameters: AssetTypesApiApiAssetTypesPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiAssetTypesPost201Response> {
      return localVarFp
        .apiAssetTypesPost(requestParameters.apiAssetTypesPostRequest, options)
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * AssetTypesApi - interface
 * @export
 * @interface AssetTypesApi
 */
export interface AssetTypesApiInterface {
  /**
   *
   * @summary 获取所有资产类型
   * @param {AssetTypesApiApiAssetTypesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApiInterface
   */
  apiAssetTypesGet(
    requestParameters?: AssetTypesApiApiAssetTypesGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiAssetTypesGet200Response>

  /**
   *
   * @summary 删除资产类型
   * @param {AssetTypesApiApiAssetTypesIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApiInterface
   */
  apiAssetTypesIdDelete(
    requestParameters: AssetTypesApiApiAssetTypesIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiAssetTypesIdDelete200Response>

  /**
   *
   * @summary 获取单个资产类型
   * @param {AssetTypesApiApiAssetTypesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApiInterface
   */
  apiAssetTypesIdGet(
    requestParameters: AssetTypesApiApiAssetTypesIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiAssetTypesPost201Response>

  /**
   *
   * @summary 更新资产类型
   * @param {AssetTypesApiApiAssetTypesIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApiInterface
   */
  apiAssetTypesIdPut(
    requestParameters: AssetTypesApiApiAssetTypesIdPutRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiAssetTypesPost201Response>

  /**
   *
   * @summary 创建资产类型
   * @param {AssetTypesApiApiAssetTypesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApiInterface
   */
  apiAssetTypesPost(
    requestParameters: AssetTypesApiApiAssetTypesPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiAssetTypesPost201Response>
}

/**
 * Request parameters for apiAssetTypesGet operation in AssetTypesApi.
 * @export
 * @interface AssetTypesApiApiAssetTypesGetRequest
 */
export interface AssetTypesApiApiAssetTypesGetRequest {
  /**
   * 页码
   * @type {number}
   * @memberof AssetTypesApiApiAssetTypesGet
   */
  readonly page?: number

  /**
   * 每页条目数
   * @type {number}
   * @memberof AssetTypesApiApiAssetTypesGet
   */
  readonly pageSize?: number
}

/**
 * Request parameters for apiAssetTypesIdDelete operation in AssetTypesApi.
 * @export
 * @interface AssetTypesApiApiAssetTypesIdDeleteRequest
 */
export interface AssetTypesApiApiAssetTypesIdDeleteRequest {
  /**
   * 资产类型ID
   * @type {number}
   * @memberof AssetTypesApiApiAssetTypesIdDelete
   */
  readonly id: number
}

/**
 * Request parameters for apiAssetTypesIdGet operation in AssetTypesApi.
 * @export
 * @interface AssetTypesApiApiAssetTypesIdGetRequest
 */
export interface AssetTypesApiApiAssetTypesIdGetRequest {
  /**
   * 资产类型ID
   * @type {number}
   * @memberof AssetTypesApiApiAssetTypesIdGet
   */
  readonly id: number
}

/**
 * Request parameters for apiAssetTypesIdPut operation in AssetTypesApi.
 * @export
 * @interface AssetTypesApiApiAssetTypesIdPutRequest
 */
export interface AssetTypesApiApiAssetTypesIdPutRequest {
  /**
   * 资产类型ID
   * @type {number}
   * @memberof AssetTypesApiApiAssetTypesIdPut
   */
  readonly id: number

  /**
   *
   * @type {ApiAssetTypesIdPutRequest}
   * @memberof AssetTypesApiApiAssetTypesIdPut
   */
  readonly apiAssetTypesIdPutRequest: ApiAssetTypesIdPutRequest
}

/**
 * Request parameters for apiAssetTypesPost operation in AssetTypesApi.
 * @export
 * @interface AssetTypesApiApiAssetTypesPostRequest
 */
export interface AssetTypesApiApiAssetTypesPostRequest {
  /**
   *
   * @type {ApiAssetTypesPostRequest}
   * @memberof AssetTypesApiApiAssetTypesPost
   */
  readonly apiAssetTypesPostRequest: ApiAssetTypesPostRequest
}

/**
 * AssetTypesApi - object-oriented interface
 * @export
 * @class AssetTypesApi
 * @extends {BaseAPI}
 */
export class AssetTypesApi extends BaseAPI implements AssetTypesApiInterface {
  /**
   *
   * @summary 获取所有资产类型
   * @param {AssetTypesApiApiAssetTypesGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApi
   */
  public apiAssetTypesGet(
    requestParameters: AssetTypesApiApiAssetTypesGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return AssetTypesApiFp(this.configuration)
      .apiAssetTypesGet(
        requestParameters.page,
        requestParameters.pageSize,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除资产类型
   * @param {AssetTypesApiApiAssetTypesIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApi
   */
  public apiAssetTypesIdDelete(
    requestParameters: AssetTypesApiApiAssetTypesIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AssetTypesApiFp(this.configuration)
      .apiAssetTypesIdDelete(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取单个资产类型
   * @param {AssetTypesApiApiAssetTypesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApi
   */
  public apiAssetTypesIdGet(
    requestParameters: AssetTypesApiApiAssetTypesIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AssetTypesApiFp(this.configuration)
      .apiAssetTypesIdGet(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 更新资产类型
   * @param {AssetTypesApiApiAssetTypesIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApi
   */
  public apiAssetTypesIdPut(
    requestParameters: AssetTypesApiApiAssetTypesIdPutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AssetTypesApiFp(this.configuration)
      .apiAssetTypesIdPut(
        requestParameters.id,
        requestParameters.apiAssetTypesIdPutRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建资产类型
   * @param {AssetTypesApiApiAssetTypesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AssetTypesApi
   */
  public apiAssetTypesPost(
    requestParameters: AssetTypesApiApiAssetTypesPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return AssetTypesApiFp(this.configuration)
      .apiAssetTypesPost(requestParameters.apiAssetTypesPostRequest, options)
      .then(request => request(this.axios, this.basePath))
  }
}
