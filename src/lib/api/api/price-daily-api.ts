/* tslint:disable */
/* eslint-disable */
/**
 * Portfolio Management API
 * A comprehensive API for managing investment portfolios, tracking assets, and analyzing portfolio performance. Supports multiple asset types including cash, stocks, bonds, cryptocurrencies, foreign currencies, and futures.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@portfoliomanagement.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base'
// @ts-ignore
import type { ApiAssetTypesIdDelete200Response } from '../models'
// @ts-ignore
import type { ApiPriceDailyDebugTimezonePostRequest } from '../models'
// @ts-ignore
import type { ApiPriceDailyGet200Response } from '../models'
// @ts-ignore
import type { ApiPriceDailyPost200Response } from '../models'
// @ts-ignore
import type { ApiPriceDailyPostRequest } from '../models'
// @ts-ignore
import type { ApiPriceDailyRangePost200Response } from '../models'
// @ts-ignore
import type { ApiPriceDailyRangePostRequest } from '../models'
/**
 * PriceDailyApi - axios parameter creator
 * @export
 */
export const PriceDailyApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 调试时区问题 - 检查日期处理
     * @param {ApiPriceDailyDebugTimezonePostRequest} apiPriceDailyDebugTimezonePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyDebugTimezonePost: async (
      apiPriceDailyDebugTimezonePostRequest: ApiPriceDailyDebugTimezonePostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiPriceDailyDebugTimezonePostRequest' is not null or undefined
      assertParamExists(
        'apiPriceDailyDebugTimezonePost',
        'apiPriceDailyDebugTimezonePostRequest',
        apiPriceDailyDebugTimezonePostRequest
      )
      const localVarPath = `/api/price_daily/debug-timezone`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        apiPriceDailyDebugTimezonePostRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取某资产的所有价格记录
     * @param {number} [assetId] 资产的唯一标识符
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页条目数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyGet: async (
      assetId?: number,
      page?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/price_daily`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (assetId !== undefined) {
        localVarQueryParameter['asset_id'] = assetId
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['page_size'] = pageSize
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 删除价格记录
     * @param {number} id 价格记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiPriceDailyIdDelete', 'id', id)
      const localVarPath = `/api/price_daily/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取单个价格记录详情
     * @param {number} id 价格记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiPriceDailyIdGet', 'id', id)
      const localVarPath = `/api/price_daily/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 创建/更新价格记录
     * @param {ApiPriceDailyPostRequest} apiPriceDailyPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyPost: async (
      apiPriceDailyPostRequest: ApiPriceDailyPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiPriceDailyPostRequest' is not null or undefined
      assertParamExists(
        'apiPriceDailyPost',
        'apiPriceDailyPostRequest',
        apiPriceDailyPostRequest
      )
      const localVarPath = `/api/price_daily`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        apiPriceDailyPostRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary 获取特定资产在时间范围内的价格数据
     * @param {ApiPriceDailyRangePostRequest} apiPriceDailyRangePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyRangePost: async (
      apiPriceDailyRangePostRequest: ApiPriceDailyRangePostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'apiPriceDailyRangePostRequest' is not null or undefined
      assertParamExists(
        'apiPriceDailyRangePost',
        'apiPriceDailyRangePostRequest',
        apiPriceDailyRangePostRequest
      )
      const localVarPath = `/api/price_daily/range`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        apiPriceDailyRangePostRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PriceDailyApi - functional programming interface
 * @export
 */
export const PriceDailyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    PriceDailyApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary 调试时区问题 - 检查日期处理
     * @param {ApiPriceDailyDebugTimezonePostRequest} apiPriceDailyDebugTimezonePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPriceDailyDebugTimezonePost(
      apiPriceDailyDebugTimezonePostRequest: ApiPriceDailyDebugTimezonePostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiPriceDailyDebugTimezonePost(
          apiPriceDailyDebugTimezonePostRequest,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PriceDailyApi.apiPriceDailyDebugTimezonePost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 获取某资产的所有价格记录
     * @param {number} [assetId] 资产的唯一标识符
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页条目数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPriceDailyGet(
      assetId?: number,
      page?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiPriceDailyGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiPriceDailyGet(
          assetId,
          page,
          pageSize,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PriceDailyApi.apiPriceDailyGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 删除价格记录
     * @param {number} id 价格记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPriceDailyIdDelete(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiAssetTypesIdDelete200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiPriceDailyIdDelete(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PriceDailyApi.apiPriceDailyIdDelete']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 获取单个价格记录详情
     * @param {number} id 价格记录ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPriceDailyIdGet(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiPriceDailyPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiPriceDailyIdGet(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PriceDailyApi.apiPriceDailyIdGet']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 创建/更新价格记录
     * @param {ApiPriceDailyPostRequest} apiPriceDailyPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPriceDailyPost(
      apiPriceDailyPostRequest: ApiPriceDailyPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiPriceDailyPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiPriceDailyPost(
          apiPriceDailyPostRequest,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PriceDailyApi.apiPriceDailyPost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary 获取特定资产在时间范围内的价格数据
     * @param {ApiPriceDailyRangePostRequest} apiPriceDailyRangePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiPriceDailyRangePost(
      apiPriceDailyRangePostRequest: ApiPriceDailyRangePostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ApiPriceDailyRangePost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiPriceDailyRangePost(
          apiPriceDailyRangePostRequest,
          options
        )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PriceDailyApi.apiPriceDailyRangePost']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * PriceDailyApi - factory interface
 * @export
 */
export const PriceDailyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PriceDailyApiFp(configuration)
  return {
    /**
     *
     * @summary 调试时区问题 - 检查日期处理
     * @param {PriceDailyApiApiPriceDailyDebugTimezonePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyDebugTimezonePost(
      requestParameters: PriceDailyApiApiPriceDailyDebugTimezonePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<void> {
      return localVarFp
        .apiPriceDailyDebugTimezonePost(
          requestParameters.apiPriceDailyDebugTimezonePostRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 获取某资产的所有价格记录
     * @param {PriceDailyApiApiPriceDailyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyGet(
      requestParameters: PriceDailyApiApiPriceDailyGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiPriceDailyGet200Response> {
      return localVarFp
        .apiPriceDailyGet(
          requestParameters.assetId,
          requestParameters.page,
          requestParameters.pageSize,
          options
        )
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 删除价格记录
     * @param {PriceDailyApiApiPriceDailyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyIdDelete(
      requestParameters: PriceDailyApiApiPriceDailyIdDeleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiAssetTypesIdDelete200Response> {
      return localVarFp
        .apiPriceDailyIdDelete(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 获取单个价格记录详情
     * @param {PriceDailyApiApiPriceDailyIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyIdGet(
      requestParameters: PriceDailyApiApiPriceDailyIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiPriceDailyPost200Response> {
      return localVarFp
        .apiPriceDailyIdGet(requestParameters.id, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 创建/更新价格记录
     * @param {PriceDailyApiApiPriceDailyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyPost(
      requestParameters: PriceDailyApiApiPriceDailyPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiPriceDailyPost200Response> {
      return localVarFp
        .apiPriceDailyPost(requestParameters.apiPriceDailyPostRequest, options)
        .then(request => request(axios, basePath))
    },
    /**
     *
     * @summary 获取特定资产在时间范围内的价格数据
     * @param {PriceDailyApiApiPriceDailyRangePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiPriceDailyRangePost(
      requestParameters: PriceDailyApiApiPriceDailyRangePostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ApiPriceDailyRangePost200Response> {
      return localVarFp
        .apiPriceDailyRangePost(
          requestParameters.apiPriceDailyRangePostRequest,
          options
        )
        .then(request => request(axios, basePath))
    },
  }
}

/**
 * PriceDailyApi - interface
 * @export
 * @interface PriceDailyApi
 */
export interface PriceDailyApiInterface {
  /**
   *
   * @summary 调试时区问题 - 检查日期处理
   * @param {PriceDailyApiApiPriceDailyDebugTimezonePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApiInterface
   */
  apiPriceDailyDebugTimezonePost(
    requestParameters: PriceDailyApiApiPriceDailyDebugTimezonePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<void>

  /**
   *
   * @summary 获取某资产的所有价格记录
   * @param {PriceDailyApiApiPriceDailyGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApiInterface
   */
  apiPriceDailyGet(
    requestParameters?: PriceDailyApiApiPriceDailyGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiPriceDailyGet200Response>

  /**
   *
   * @summary 删除价格记录
   * @param {PriceDailyApiApiPriceDailyIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApiInterface
   */
  apiPriceDailyIdDelete(
    requestParameters: PriceDailyApiApiPriceDailyIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiAssetTypesIdDelete200Response>

  /**
   *
   * @summary 获取单个价格记录详情
   * @param {PriceDailyApiApiPriceDailyIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApiInterface
   */
  apiPriceDailyIdGet(
    requestParameters: PriceDailyApiApiPriceDailyIdGetRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiPriceDailyPost200Response>

  /**
   *
   * @summary 创建/更新价格记录
   * @param {PriceDailyApiApiPriceDailyPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApiInterface
   */
  apiPriceDailyPost(
    requestParameters: PriceDailyApiApiPriceDailyPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiPriceDailyPost200Response>

  /**
   *
   * @summary 获取特定资产在时间范围内的价格数据
   * @param {PriceDailyApiApiPriceDailyRangePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApiInterface
   */
  apiPriceDailyRangePost(
    requestParameters: PriceDailyApiApiPriceDailyRangePostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ApiPriceDailyRangePost200Response>
}

/**
 * Request parameters for apiPriceDailyDebugTimezonePost operation in PriceDailyApi.
 * @export
 * @interface PriceDailyApiApiPriceDailyDebugTimezonePostRequest
 */
export interface PriceDailyApiApiPriceDailyDebugTimezonePostRequest {
  /**
   *
   * @type {ApiPriceDailyDebugTimezonePostRequest}
   * @memberof PriceDailyApiApiPriceDailyDebugTimezonePost
   */
  readonly apiPriceDailyDebugTimezonePostRequest: ApiPriceDailyDebugTimezonePostRequest
}

/**
 * Request parameters for apiPriceDailyGet operation in PriceDailyApi.
 * @export
 * @interface PriceDailyApiApiPriceDailyGetRequest
 */
export interface PriceDailyApiApiPriceDailyGetRequest {
  /**
   * 资产的唯一标识符
   * @type {number}
   * @memberof PriceDailyApiApiPriceDailyGet
   */
  readonly assetId?: number

  /**
   * 页码
   * @type {number}
   * @memberof PriceDailyApiApiPriceDailyGet
   */
  readonly page?: number

  /**
   * 每页条目数
   * @type {number}
   * @memberof PriceDailyApiApiPriceDailyGet
   */
  readonly pageSize?: number
}

/**
 * Request parameters for apiPriceDailyIdDelete operation in PriceDailyApi.
 * @export
 * @interface PriceDailyApiApiPriceDailyIdDeleteRequest
 */
export interface PriceDailyApiApiPriceDailyIdDeleteRequest {
  /**
   * 价格记录ID
   * @type {number}
   * @memberof PriceDailyApiApiPriceDailyIdDelete
   */
  readonly id: number
}

/**
 * Request parameters for apiPriceDailyIdGet operation in PriceDailyApi.
 * @export
 * @interface PriceDailyApiApiPriceDailyIdGetRequest
 */
export interface PriceDailyApiApiPriceDailyIdGetRequest {
  /**
   * 价格记录ID
   * @type {number}
   * @memberof PriceDailyApiApiPriceDailyIdGet
   */
  readonly id: number
}

/**
 * Request parameters for apiPriceDailyPost operation in PriceDailyApi.
 * @export
 * @interface PriceDailyApiApiPriceDailyPostRequest
 */
export interface PriceDailyApiApiPriceDailyPostRequest {
  /**
   *
   * @type {ApiPriceDailyPostRequest}
   * @memberof PriceDailyApiApiPriceDailyPost
   */
  readonly apiPriceDailyPostRequest: ApiPriceDailyPostRequest
}

/**
 * Request parameters for apiPriceDailyRangePost operation in PriceDailyApi.
 * @export
 * @interface PriceDailyApiApiPriceDailyRangePostRequest
 */
export interface PriceDailyApiApiPriceDailyRangePostRequest {
  /**
   *
   * @type {ApiPriceDailyRangePostRequest}
   * @memberof PriceDailyApiApiPriceDailyRangePost
   */
  readonly apiPriceDailyRangePostRequest: ApiPriceDailyRangePostRequest
}

/**
 * PriceDailyApi - object-oriented interface
 * @export
 * @class PriceDailyApi
 * @extends {BaseAPI}
 */
export class PriceDailyApi extends BaseAPI implements PriceDailyApiInterface {
  /**
   *
   * @summary 调试时区问题 - 检查日期处理
   * @param {PriceDailyApiApiPriceDailyDebugTimezonePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApi
   */
  public apiPriceDailyDebugTimezonePost(
    requestParameters: PriceDailyApiApiPriceDailyDebugTimezonePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PriceDailyApiFp(this.configuration)
      .apiPriceDailyDebugTimezonePost(
        requestParameters.apiPriceDailyDebugTimezonePostRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取某资产的所有价格记录
   * @param {PriceDailyApiApiPriceDailyGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApi
   */
  public apiPriceDailyGet(
    requestParameters: PriceDailyApiApiPriceDailyGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return PriceDailyApiFp(this.configuration)
      .apiPriceDailyGet(
        requestParameters.assetId,
        requestParameters.page,
        requestParameters.pageSize,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 删除价格记录
   * @param {PriceDailyApiApiPriceDailyIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApi
   */
  public apiPriceDailyIdDelete(
    requestParameters: PriceDailyApiApiPriceDailyIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PriceDailyApiFp(this.configuration)
      .apiPriceDailyIdDelete(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取单个价格记录详情
   * @param {PriceDailyApiApiPriceDailyIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApi
   */
  public apiPriceDailyIdGet(
    requestParameters: PriceDailyApiApiPriceDailyIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PriceDailyApiFp(this.configuration)
      .apiPriceDailyIdGet(requestParameters.id, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 创建/更新价格记录
   * @param {PriceDailyApiApiPriceDailyPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApi
   */
  public apiPriceDailyPost(
    requestParameters: PriceDailyApiApiPriceDailyPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PriceDailyApiFp(this.configuration)
      .apiPriceDailyPost(requestParameters.apiPriceDailyPostRequest, options)
      .then(request => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary 获取特定资产在时间范围内的价格数据
   * @param {PriceDailyApiApiPriceDailyRangePostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PriceDailyApi
   */
  public apiPriceDailyRangePost(
    requestParameters: PriceDailyApiApiPriceDailyRangePostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return PriceDailyApiFp(this.configuration)
      .apiPriceDailyRangePost(
        requestParameters.apiPriceDailyRangePostRequest,
        options
      )
      .then(request => request(this.axios, this.basePath))
  }
}
